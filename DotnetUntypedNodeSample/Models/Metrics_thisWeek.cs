// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Graphdotnetv4.Models {
    /// <summary>
    /// Summary totals for the last 7 days
    /// </summary>
    public class Metrics_thisWeek : IAdditionalDataHolder, IParsable {
        /// <summary>APIs added in the last week</summary>
        public int? Added { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>APIs updated in the last week</summary>
        public int? Updated { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Metrics_thisWeek"/> and sets the default values.
        /// </summary>
        public Metrics_thisWeek() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Metrics_thisWeek"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Metrics_thisWeek CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Metrics_thisWeek();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"added", n => { Added = n.GetIntValue(); } },
                {"updated", n => { Updated = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("added", Added);
            writer.WriteIntValue("updated", Updated);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
