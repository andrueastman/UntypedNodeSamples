// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Graphdotnetv4.Models {
    /// <summary>
    /// List of basic metrics
    /// </summary>
    public class Metrics : IParsable {
        /// <summary>Data used for charting etc</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Datasets { get; set; }
#nullable restore
#else
        public UntypedNode Datasets { get; set; }
#endif
        /// <summary>Percentage of all APIs where auto fixes have been applied</summary>
        public int? FixedPct { get; set; }
        /// <summary>Total number of fixes applied across all APIs</summary>
        public int? Fixes { get; set; }
        /// <summary>Number of newly invalid APIs</summary>
        public int? Invalid { get; set; }
        /// <summary>Open GitHub issues on our main repo</summary>
        public int? Issues { get; set; }
        /// <summary>Number of unique APIs</summary>
        public int? NumAPIs { get; set; }
        /// <summary>Number of methods of API retrieval</summary>
        public int? NumDrivers { get; set; }
        /// <summary>Total number of endpoints inside all definitions</summary>
        public int? NumEndpoints { get; set; }
        /// <summary>Number of API providers in directory</summary>
        public int? NumProviders { get; set; }
        /// <summary>Number of API definitions including different versions of the same API</summary>
        public int? NumSpecs { get; set; }
        /// <summary>GitHub stars for our main repo</summary>
        public int? Stars { get; set; }
        /// <summary>Summary totals for the last 7 days</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Metrics_thisWeek? ThisWeek { get; set; }
#nullable restore
#else
        public Metrics_thisWeek ThisWeek { get; set; }
#endif
        /// <summary>Number of unofficial APIs</summary>
        public int? Unofficial { get; set; }
        /// <summary>Number of unreachable (4XX,5XX status) APIs</summary>
        public int? Unreachable { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Metrics"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Metrics CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Metrics();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"datasets", n => { Datasets = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                {"fixedPct", n => { FixedPct = n.GetIntValue(); } },
                {"fixes", n => { Fixes = n.GetIntValue(); } },
                {"invalid", n => { Invalid = n.GetIntValue(); } },
                {"issues", n => { Issues = n.GetIntValue(); } },
                {"numAPIs", n => { NumAPIs = n.GetIntValue(); } },
                {"numDrivers", n => { NumDrivers = n.GetIntValue(); } },
                {"numEndpoints", n => { NumEndpoints = n.GetIntValue(); } },
                {"numProviders", n => { NumProviders = n.GetIntValue(); } },
                {"numSpecs", n => { NumSpecs = n.GetIntValue(); } },
                {"stars", n => { Stars = n.GetIntValue(); } },
                {"thisWeek", n => { ThisWeek = n.GetObjectValue<Metrics_thisWeek>(Metrics_thisWeek.CreateFromDiscriminatorValue); } },
                {"unofficial", n => { Unofficial = n.GetIntValue(); } },
                {"unreachable", n => { Unreachable = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<UntypedNode>("datasets", Datasets);
            writer.WriteIntValue("fixedPct", FixedPct);
            writer.WriteIntValue("fixes", Fixes);
            writer.WriteIntValue("invalid", Invalid);
            writer.WriteIntValue("issues", Issues);
            writer.WriteIntValue("numAPIs", NumAPIs);
            writer.WriteIntValue("numDrivers", NumDrivers);
            writer.WriteIntValue("numEndpoints", NumEndpoints);
            writer.WriteIntValue("numProviders", NumProviders);
            writer.WriteIntValue("numSpecs", NumSpecs);
            writer.WriteIntValue("stars", Stars);
            writer.WriteObjectValue<Metrics_thisWeek>("thisWeek", ThisWeek);
            writer.WriteIntValue("unofficial", Unofficial);
            writer.WriteIntValue("unreachable", Unreachable);
        }
    }
}
