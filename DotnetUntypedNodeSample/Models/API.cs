// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Graphdotnetv4.Models {
    /// <summary>
    /// Meta information about API
    /// </summary>
    public class API : IParsable {
        /// <summary>Timestamp when the API was first added to the directory</summary>
        public DateTimeOffset? Added { get; set; }
        /// <summary>Recommended version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Preferred { get; set; }
#nullable restore
#else
        public string Preferred { get; set; }
#endif
        /// <summary>List of supported versions of the API</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public API_versions? Versions { get; set; }
#nullable restore
#else
        public API_versions Versions { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="API"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static API CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new API();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"added", n => { Added = n.GetDateTimeOffsetValue(); } },
                {"preferred", n => { Preferred = n.GetStringValue(); } },
                {"versions", n => { Versions = n.GetObjectValue<API_versions>(API_versions.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("added", Added);
            writer.WriteStringValue("preferred", Preferred);
            writer.WriteObjectValue<API_versions>("versions", Versions);
        }
    }
}
